//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18046
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MoodWeather
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using MoodWeather.Web;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace MoodWeather.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The 'RegistrationData' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MoodWeather.Web")]
    public sealed partial class RegistrationData : Entity
    {
        
        private string _answer;
        
        private string _email;
        
        private string _friendlyName;
        
        private string _question;
        
        private string _role;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnRoleChanging(string value);
        partial void OnRoleChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationData"/> class.
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Answer' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references a property 'ValidationErrorRequiredField' on type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'.
        // [RequiredAttribute(ErrorMessageResourceName = "ValidationErrorRequiredField", ErrorMessageResourceType = typeof(MoodWeather.Web.Resources.ValidationErrorResources))]
        // 
        [DataMember()]
        [Display(Name="SecurityAnswerLabel", Order=6, ResourceType=typeof(global::MoodWeather.Web.Resources.RegistrationDataResources))]
        public string Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    this.OnAnswerChanging(value);
                    this.RaiseDataMemberChanging("Answer");
                    this.ValidateProperty("Answer", value);
                    this._answer = value;
                    this.RaiseDataMemberChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RegularExpressionAttribute' references type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.RegularExpressionAttribute' references a property 'ValidationErrorInvalidEmail' on type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'.
        // [RegularExpressionAttribute("^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$", ErrorMessageResourceName = "ValidationErrorInvalidEmail", ErrorMessageResourceType = typeof(MoodWeather.Web.Resources.ValidationErrorResources))]
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references a property 'ValidationErrorRequiredField' on type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'.
        // [RequiredAttribute(ErrorMessageResourceName = "ValidationErrorRequiredField", ErrorMessageResourceType = typeof(MoodWeather.Web.Resources.ValidationErrorResources))]
        // 
        [DataMember()]
        [Display(Name="EmailLabel", Order=2, ResourceType=typeof(global::MoodWeather.Web.Resources.RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaisePropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.StringLengthAttribute' references type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.StringLengthAttribute' references a property 'ValidationErrorBadFriendlyNameLength' on type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'.
        // [StringLengthAttribute(255, ErrorMessageResourceName = "ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType = typeof(MoodWeather.Web.Resources.ValidationErrorResources))]
        // 
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(global::MoodWeather.Web.Resources.RegistrationDataResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Question' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references a property 'ValidationErrorRequiredField' on type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'.
        // [RequiredAttribute(ErrorMessageResourceName = "ValidationErrorRequiredField", ErrorMessageResourceType = typeof(MoodWeather.Web.Resources.ValidationErrorResources))]
        // 
        [DataMember()]
        [Display(Name="SecurityQuestionLabel", Order=5, ResourceType=typeof(global::MoodWeather.Web.Resources.RegistrationDataResources))]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    this.OnQuestionChanging(value);
                    this.RaiseDataMemberChanging("Question");
                    this.ValidateProperty("Question", value);
                    this._question = value;
                    this.RaiseDataMemberChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Role' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references a property 'ValidationErrorRequiredField' on type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'.
        // [RequiredAttribute(ErrorMessageResourceName = "ValidationErrorRequiredField", ErrorMessageResourceType = typeof(MoodWeather.Web.Resources.ValidationErrorResources))]
        // 
        [DataMember()]
        [Display(Name="UserRoleLabel", Order=7, ResourceType=typeof(global::MoodWeather.Web.Resources.RegistrationDataResources))]
        public string Role
        {
            get
            {
                return this._role;
            }
            set
            {
                if ((this._role != value))
                {
                    this.OnRoleChanging(value);
                    this.RaiseDataMemberChanging("Role");
                    this.ValidateProperty("Role", value);
                    this._role = value;
                    this.RaiseDataMemberChanged("Role");
                    this.OnRoleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        // The following attributes were not generated:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RegularExpressionAttribute' references type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.RegularExpressionAttribute' references a property 'ValidationErrorInvalidUserName' on type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'.
        // [RegularExpressionAttribute("^[a-zA-Z0-9_]*$", ErrorMessageResourceName = "ValidationErrorInvalidUserName", ErrorMessageResourceType = typeof(MoodWeather.Web.Resources.ValidationErrorResources))]
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references a property 'ValidationErrorRequiredField' on type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'.
        // [RequiredAttribute(ErrorMessageResourceName = "ValidationErrorRequiredField", ErrorMessageResourceType = typeof(MoodWeather.Web.Resources.ValidationErrorResources))]
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.StringLengthAttribute' references type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.StringLengthAttribute' references a property 'ValidationErrorBadUserNameLength' on type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'.
        // [StringLengthAttribute(255, ErrorMessageResourceName = "ValidationErrorBadUserNameLength", ErrorMessageResourceType = typeof(MoodWeather.Web.Resources.ValidationErrorResources), MinimumLength = 4)]
        // 
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(global::MoodWeather.Web.Resources.RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaisePropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._email == null) 
                        || (this._userName == null)))
            {
                return null;
            }
            return EntityKey.Create(this._email, this._userName);
        }
    }
    
    /// <summary>
    /// The 'User' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MoodWeather.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _friendlyName;
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
}
namespace MoodWeather.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using MoodWeather.Web;
    using MoodWeather.Web.SqlModel;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'ApiKeyService' DomainService.
    /// </summary>
    public sealed partial class ApiKeyContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiKeyContext"/> class.
        /// </summary>
        public ApiKeyContext() : 
                this(new WebDomainClient<IApiKeyServiceContract>(new Uri("MoodWeather-Web-Services-ApiKeyService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiKeyContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ApiKeyService service URI.</param>
        public ApiKeyContext(Uri serviceUri) : 
                this(new WebDomainClient<IApiKeyServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiKeyContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ApiKeyContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="WeatherSetup"/> entity instances that have been loaded into this <see cref="ApiKeyContext"/> instance.
        /// </summary>
        public EntitySet<WeatherSetup> WeatherSetups
        {
            get
            {
                return base.EntityContainer.GetEntitySet<WeatherSetup>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="WeatherSetup"/> entity instances using the 'GetWeatherSetups' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="WeatherSetup"/> entity instances.</returns>
        public EntityQuery<WeatherSetup> GetWeatherSetupsQuery()
        {
            this.ValidateMethod("GetWeatherSetupsQuery", null);
            return base.CreateQuery<WeatherSetup>("GetWeatherSetups", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ApiKeyContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ApiKeyService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IApiKeyServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetWeatherSetups' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ApiKeyService/GetWeatherSetupsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ApiKeyService/GetWeatherSetups", ReplyAction="http://tempuri.org/ApiKeyService/GetWeatherSetupsResponse")]
            [WebGet()]
            IAsyncResult BeginGetWeatherSetups(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetWeatherSetups'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetWeatherSetups'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetWeatherSetups' operation.</returns>
            QueryResult<WeatherSetup> EndGetWeatherSetups(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ApiKeyService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ApiKeyService/SubmitChanges", ReplyAction="http://tempuri.org/ApiKeyService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ApiKeyContextEntityContainer : EntityContainer
        {
            
            public ApiKeyContextEntityContainer()
            {
                this.CreateEntitySet<WeatherSetup>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'AuthenticationService' DomainService.
    /// </summary>
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("MoodWeather-Web-Services-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AuthenticationService service URI.</param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="User"/> entity instances that have been loaded into this <see cref="AuthenticationContext"/> instance.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AuthenticationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    public enum CreateUserStatus
    {
        
        Success = 0,
        
        InvalidUserName = 1,
        
        InvalidPassword = 2,
        
        InvalidQuestion = 3,
        
        InvalidAnswer = 4,
        
        InvalidEmail = 5,
        
        DuplicateUserName = 6,
        
        DuplicateEmail = 7,
        
        Failure = 8,
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'FtpSetupService' DomainService.
    /// </summary>
    public sealed partial class FtpSetupContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FtpSetupContext"/> class.
        /// </summary>
        public FtpSetupContext() : 
                this(new WebDomainClient<IFtpSetupServiceContract>(new Uri("MoodWeather-Web-Services-FtpSetupService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FtpSetupContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The FtpSetupService service URI.</param>
        public FtpSetupContext(Uri serviceUri) : 
                this(new WebDomainClient<IFtpSetupServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FtpSetupContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public FtpSetupContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="WeatherPublish"/> entity instances that have been loaded into this <see cref="FtpSetupContext"/> instance.
        /// </summary>
        public EntitySet<WeatherPublish> WeatherPublishes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<WeatherPublish>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="WeatherPublish"/> entity instances using the 'GetWeatherPublishes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="WeatherPublish"/> entity instances.</returns>
        public EntityQuery<WeatherPublish> GetWeatherPublishesQuery()
        {
            this.ValidateMethod("GetWeatherPublishesQuery", null);
            return base.CreateQuery<WeatherPublish>("GetWeatherPublishes", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new FtpSetupContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'FtpSetupService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IFtpSetupServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetWeatherPublishes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FtpSetupService/GetWeatherPublishesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FtpSetupService/GetWeatherPublishes", ReplyAction="http://tempuri.org/FtpSetupService/GetWeatherPublishesResponse")]
            [WebGet()]
            IAsyncResult BeginGetWeatherPublishes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetWeatherPublishes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetWeatherPublishes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetWeatherPublishes' operation.</returns>
            QueryResult<WeatherPublish> EndGetWeatherPublishes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FtpSetupService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FtpSetupService/SubmitChanges", ReplyAction="http://tempuri.org/FtpSetupService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class FtpSetupContextEntityContainer : EntityContainer
        {
            
            public FtpSetupContextEntityContainer()
            {
                this.CreateEntitySet<WeatherPublish>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'UserRegistrationService' DomainService.
    /// </summary>
    public sealed partial class UserRegistrationContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class.
        /// </summary>
        public UserRegistrationContext() : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(new Uri("MoodWeather-Web-Services-UserRegistrationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The UserRegistrationService service URI.</param>
        public UserRegistrationContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public UserRegistrationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="RegistrationData"/> entity instances that have been loaded into this <see cref="UserRegistrationContext"/> instance.
        /// </summary>
        public EntitySet<RegistrationData> RegistrationDatas
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RegistrationData>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RegistrationData"/> entity instances using the 'GetUsers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RegistrationData"/> entity instances.</returns>
        public EntityQuery<RegistrationData> GetUsersQuery()
        {
            this.ValidateMethod("GetUsersQuery", null);
            return base.CreateQuery<RegistrationData>("GetUsers", null, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        // Unable to generate the following attributes for parameter 'password' due to the following errors:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RegularExpressionAttribute' references type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.RegularExpressionAttribute' references a property 'ValidationErrorBadPasswordStrength' on type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'.
        // [RegularExpressionAttribute("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName = "ValidationErrorBadPasswordStrength", ErrorMessageResourceType = typeof(MoodWeather.Web.Resources.ValidationErrorResources))]
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references a property 'ValidationErrorRequiredField' on type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'.
        // [RequiredAttribute(ErrorMessageResourceName = "ValidationErrorRequiredField", ErrorMessageResourceType = typeof(MoodWeather.Web.Resources.ValidationErrorResources))]
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.StringLengthAttribute' references type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.StringLengthAttribute' references a property 'ValidationErrorBadPasswordLength' on type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'.
        // [StringLengthAttribute(50, ErrorMessageResourceName = "ValidationErrorBadPasswordLength", ErrorMessageResourceType = typeof(MoodWeather.Web.Resources.ValidationErrorResources), MinimumLength = 7)]
        // 
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, string password, Action<InvokeOperation<CreateUserStatus>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        // Unable to generate the following attributes for parameter 'password' due to the following errors:
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RegularExpressionAttribute' references type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.RegularExpressionAttribute' references a property 'ValidationErrorBadPasswordStrength' on type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'.
        // [RegularExpressionAttribute("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName = "ValidationErrorBadPasswordStrength", ErrorMessageResourceType = typeof(MoodWeather.Web.Resources.ValidationErrorResources))]
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references a property 'ValidationErrorRequiredField' on type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'.
        // [RequiredAttribute(ErrorMessageResourceName = "ValidationErrorRequiredField", ErrorMessageResourceType = typeof(MoodWeather.Web.Resources.ValidationErrorResources))]
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.StringLengthAttribute' references type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'. If you would like the attribute to be generated, make sure the assembly containing the attribute is referenced on the client.
        // - The attribute 'System.ComponentModel.DataAnnotations.StringLengthAttribute' references a property 'ValidationErrorBadPasswordLength' on type 'MoodWeather.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'MoodWeather01'.
        // [StringLengthAttribute(50, ErrorMessageResourceName = "ValidationErrorBadPasswordLength", ErrorMessageResourceType = typeof(MoodWeather.Web.Resources.ValidationErrorResources), MinimumLength = 7)]
        // 
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserRegistrationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'UserRegistrationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IUserRegistrationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'CreateUser' operation.
            /// </summary>
            /// <param name="user">The value for the 'user' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/CreateUser", ReplyAction="http://tempuri.org/UserRegistrationService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCreateUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCreateUser'.</param>
            /// <returns>The 'CreateUserStatus' returned from the 'CreateUser' operation.</returns>
            CreateUserStatus EndCreateUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUsers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/GetUsersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/GetUsers", ReplyAction="http://tempuri.org/UserRegistrationService/GetUsersResponse")]
            [WebGet()]
            IAsyncResult BeginGetUsers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUsers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUsers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUsers' operation.</returns>
            QueryResult<RegistrationData> EndGetUsers(IAsyncResult result);
        }
        
        internal sealed class UserRegistrationContextEntityContainer : EntityContainer
        {
            
            public UserRegistrationContextEntityContainer()
            {
                this.CreateEntitySet<RegistrationData>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'WeatherReportServices' DomainService.
    /// </summary>
    public sealed partial class WeatherReportServices : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WeatherReportServices"/> class.
        /// </summary>
        public WeatherReportServices() : 
                this(new WebDomainClient<IWeatherReportServicesContract>(new Uri("MoodWeather-Web-Services-WeatherReportServices.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WeatherReportServices"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The WeatherReportServices service URI.</param>
        public WeatherReportServices(Uri serviceUri) : 
                this(new WebDomainClient<IWeatherReportServicesContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WeatherReportServices"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public WeatherReportServices(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="viewCityStatu"/> entity instances that have been loaded into this <see cref="WeatherReportServices"/> instance.
        /// </summary>
        public EntitySet<viewCityStatu> viewCityStatus
        {
            get
            {
                return base.EntityContainer.GetEntitySet<viewCityStatu>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="viewCityStatu"/> entity instances using the 'GetViewCityStatus' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="viewCityStatu"/> entity instances.</returns>
        public EntityQuery<viewCityStatu> GetViewCityStatusQuery()
        {
            this.ValidateMethod("GetViewCityStatusQuery", null);
            return base.CreateQuery<viewCityStatu>("GetViewCityStatus", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new WeatherReportServicesEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'WeatherReportServices' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IWeatherReportServicesContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetViewCityStatus' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WeatherReportServices/GetViewCityStatusDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WeatherReportServices/GetViewCityStatus", ReplyAction="http://tempuri.org/WeatherReportServices/GetViewCityStatusResponse")]
            [WebGet()]
            IAsyncResult BeginGetViewCityStatus(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetViewCityStatus'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetViewCityStatus'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetViewCityStatus' operation.</returns>
            QueryResult<viewCityStatu> EndGetViewCityStatus(IAsyncResult result);
        }
        
        internal sealed class WeatherReportServicesEntityContainer : EntityContainer
        {
            
            public WeatherReportServicesEntityContainer()
            {
                this.CreateEntitySet<viewCityStatu>(EntitySetOperations.None);
            }
        }
    }
}
namespace MoodWeather.Web.SqlModel
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The 'viewCityStatu' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MoodWeather.Web.SqlModel")]
    public sealed partial class viewCityStatu : Entity
    {
        
        private Nullable<byte> _active;
        
        private string _cityAlternative;
        
        private Nullable<int> _cityId;
        
        private string _cityName;
        
        private string _country;
        
        private string _countryCode;
        
        private int _id;
        
        private Nullable<DateTime> _lastUpdate;
        
        private string _teamco;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActiveChanging(Nullable<byte> value);
        partial void OnActiveChanged();
        partial void OnCityAlternativeChanging(string value);
        partial void OnCityAlternativeChanged();
        partial void OnCityIdChanging(Nullable<int> value);
        partial void OnCityIdChanged();
        partial void OnCityNameChanging(string value);
        partial void OnCityNameChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnCountryCodeChanging(string value);
        partial void OnCountryCodeChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnLastUpdateChanging(Nullable<DateTime> value);
        partial void OnLastUpdateChanged();
        partial void OnTeamcoChanging(string value);
        partial void OnTeamcoChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="viewCityStatu"/> class.
        /// </summary>
        public viewCityStatu()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Active' value.
        /// </summary>
        [DataMember()]
        public Nullable<byte> Active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    this.OnActiveChanging(value);
                    this.RaiseDataMemberChanging("Active");
                    this.ValidateProperty("Active", value);
                    this._active = value;
                    this.RaiseDataMemberChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CityAlternative' value.
        /// </summary>
        [DataMember()]
        [StringLength(250)]
        public string CityAlternative
        {
            get
            {
                return this._cityAlternative;
            }
            set
            {
                if ((this._cityAlternative != value))
                {
                    this.OnCityAlternativeChanging(value);
                    this.RaiseDataMemberChanging("CityAlternative");
                    this.ValidateProperty("CityAlternative", value);
                    this._cityAlternative = value;
                    this.RaiseDataMemberChanged("CityAlternative");
                    this.OnCityAlternativeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CityId' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> CityId
        {
            get
            {
                return this._cityId;
            }
            set
            {
                if ((this._cityId != value))
                {
                    this.OnCityIdChanging(value);
                    this.RaiseDataMemberChanging("CityId");
                    this.ValidateProperty("CityId", value);
                    this._cityId = value;
                    this.RaiseDataMemberChanged("CityId");
                    this.OnCityIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CityName' value.
        /// </summary>
        [DataMember()]
        [StringLength(250)]
        public string CityName
        {
            get
            {
                return this._cityName;
            }
            set
            {
                if ((this._cityName != value))
                {
                    this.OnCityNameChanging(value);
                    this.RaiseDataMemberChanging("CityName");
                    this.ValidateProperty("CityName", value);
                    this._cityName = value;
                    this.RaiseDataMemberChanged("CityName");
                    this.OnCityNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Country' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Country
        {
            get
            {
                return this._country;
            }
            set
            {
                if ((this._country != value))
                {
                    this.OnCountryChanging(value);
                    this.RaiseDataMemberChanging("Country");
                    this.ValidateProperty("Country", value);
                    this._country = value;
                    this.RaiseDataMemberChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CountryCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(3)]
        public string CountryCode
        {
            get
            {
                return this._countryCode;
            }
            set
            {
                if ((this._countryCode != value))
                {
                    this.OnCountryCodeChanging(value);
                    this.RaiseDataMemberChanging("CountryCode");
                    this.ValidateProperty("CountryCode", value);
                    this._countryCode = value;
                    this.RaiseDataMemberChanged("CountryCode");
                    this.OnCountryCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastUpdate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> LastUpdate
        {
            get
            {
                return this._lastUpdate;
            }
            set
            {
                if ((this._lastUpdate != value))
                {
                    this.OnLastUpdateChanging(value);
                    this.RaiseDataMemberChanging("LastUpdate");
                    this.ValidateProperty("LastUpdate", value);
                    this._lastUpdate = value;
                    this.RaiseDataMemberChanged("LastUpdate");
                    this.OnLastUpdateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Teamco' value.
        /// </summary>
        [DataMember()]
        [StringLength(3)]
        public string Teamco
        {
            get
            {
                return this._teamco;
            }
            set
            {
                if ((this._teamco != value))
                {
                    this.OnTeamcoChanging(value);
                    this.RaiseDataMemberChanging("Teamco");
                    this.ValidateProperty("Teamco", value);
                    this._teamco = value;
                    this.RaiseDataMemberChanged("Teamco");
                    this.OnTeamcoChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'WeatherPublish' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MoodWeather.Web.SqlModel")]
    public sealed partial class WeatherPublish : Entity
    {
        
        private Nullable<bool> _ftp_active;
        
        private string _ftp_address;
        
        private string _ftp_port;
        
        private string _ftp_user_name;
        
        private string _ftp_user_password;
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void Onftp_activeChanging(Nullable<bool> value);
        partial void Onftp_activeChanged();
        partial void Onftp_addressChanging(string value);
        partial void Onftp_addressChanged();
        partial void Onftp_portChanging(string value);
        partial void Onftp_portChanged();
        partial void Onftp_user_nameChanging(string value);
        partial void Onftp_user_nameChanged();
        partial void Onftp_user_passwordChanging(string value);
        partial void Onftp_user_passwordChanged();
        partial void OnidChanging(int value);
        partial void OnidChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WeatherPublish"/> class.
        /// </summary>
        public WeatherPublish()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ftp_active' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> ftp_active
        {
            get
            {
                return this._ftp_active;
            }
            set
            {
                if ((this._ftp_active != value))
                {
                    this.Onftp_activeChanging(value);
                    this.RaiseDataMemberChanging("ftp_active");
                    this.ValidateProperty("ftp_active", value);
                    this._ftp_active = value;
                    this.RaiseDataMemberChanged("ftp_active");
                    this.Onftp_activeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ftp_address' value.
        /// </summary>
        [DataMember()]
        [StringLength(250)]
        public string ftp_address
        {
            get
            {
                return this._ftp_address;
            }
            set
            {
                if ((this._ftp_address != value))
                {
                    this.Onftp_addressChanging(value);
                    this.RaiseDataMemberChanging("ftp_address");
                    this.ValidateProperty("ftp_address", value);
                    this._ftp_address = value;
                    this.RaiseDataMemberChanged("ftp_address");
                    this.Onftp_addressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ftp_port' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string ftp_port
        {
            get
            {
                return this._ftp_port;
            }
            set
            {
                if ((this._ftp_port != value))
                {
                    this.Onftp_portChanging(value);
                    this.RaiseDataMemberChanging("ftp_port");
                    this.ValidateProperty("ftp_port", value);
                    this._ftp_port = value;
                    this.RaiseDataMemberChanged("ftp_port");
                    this.Onftp_portChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ftp_user_name' value.
        /// </summary>
        [DataMember()]
        [StringLength(150)]
        public string ftp_user_name
        {
            get
            {
                return this._ftp_user_name;
            }
            set
            {
                if ((this._ftp_user_name != value))
                {
                    this.Onftp_user_nameChanging(value);
                    this.RaiseDataMemberChanging("ftp_user_name");
                    this.ValidateProperty("ftp_user_name", value);
                    this._ftp_user_name = value;
                    this.RaiseDataMemberChanged("ftp_user_name");
                    this.Onftp_user_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ftp_user_password' value.
        /// </summary>
        [DataMember()]
        [StringLength(150)]
        public string ftp_user_password
        {
            get
            {
                return this._ftp_user_password;
            }
            set
            {
                if ((this._ftp_user_password != value))
                {
                    this.Onftp_user_passwordChanging(value);
                    this.RaiseDataMemberChanging("ftp_user_password");
                    this.ValidateProperty("ftp_user_password", value);
                    this._ftp_user_password = value;
                    this.RaiseDataMemberChanged("ftp_user_password");
                    this.Onftp_user_passwordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.ValidateProperty("id", value);
                    this._id = value;
                    this.RaisePropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'WeatherSetup' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MoodWeather.Web.SqlModel")]
    public sealed partial class WeatherSetup : Entity
    {
        
        private Nullable<byte> _active;
        
        private string _api_calls;
        
        private string _api_key;
        
        private string _api_url;
        
        private string _apic_call_minute;
        
        private int _id;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnactiveChanging(Nullable<byte> value);
        partial void OnactiveChanged();
        partial void Onapi_callsChanging(string value);
        partial void Onapi_callsChanged();
        partial void Onapi_keyChanging(string value);
        partial void Onapi_keyChanged();
        partial void Onapi_urlChanging(string value);
        partial void Onapi_urlChanged();
        partial void Onapic_call_minuteChanging(string value);
        partial void Onapic_call_minuteChanged();
        partial void OnidChanging(int value);
        partial void OnidChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WeatherSetup"/> class.
        /// </summary>
        public WeatherSetup()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'active' value.
        /// </summary>
        [DataMember()]
        public Nullable<byte> active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    this.OnactiveChanging(value);
                    this.RaiseDataMemberChanging("active");
                    this.ValidateProperty("active", value);
                    this._active = value;
                    this.RaiseDataMemberChanged("active");
                    this.OnactiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'api_calls' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string api_calls
        {
            get
            {
                return this._api_calls;
            }
            set
            {
                if ((this._api_calls != value))
                {
                    this.Onapi_callsChanging(value);
                    this.RaiseDataMemberChanging("api_calls");
                    this.ValidateProperty("api_calls", value);
                    this._api_calls = value;
                    this.RaiseDataMemberChanged("api_calls");
                    this.Onapi_callsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'api_key' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(150)]
        public string api_key
        {
            get
            {
                return this._api_key;
            }
            set
            {
                if ((this._api_key != value))
                {
                    this.Onapi_keyChanging(value);
                    this.ValidateProperty("api_key", value);
                    this._api_key = value;
                    this.RaisePropertyChanged("api_key");
                    this.Onapi_keyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'api_url' value.
        /// </summary>
        [DataMember()]
        [StringLength(250)]
        public string api_url
        {
            get
            {
                return this._api_url;
            }
            set
            {
                if ((this._api_url != value))
                {
                    this.Onapi_urlChanging(value);
                    this.RaiseDataMemberChanging("api_url");
                    this.ValidateProperty("api_url", value);
                    this._api_url = value;
                    this.RaiseDataMemberChanged("api_url");
                    this.Onapi_urlChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'apic_call_minute' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string apic_call_minute
        {
            get
            {
                return this._apic_call_minute;
            }
            set
            {
                if ((this._apic_call_minute != value))
                {
                    this.Onapic_call_minuteChanging(value);
                    this.RaiseDataMemberChanging("apic_call_minute");
                    this.ValidateProperty("apic_call_minute", value);
                    this._apic_call_minute = value;
                    this.RaiseDataMemberChanged("apic_call_minute");
                    this.Onapic_call_minuteChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.RaiseDataMemberChanging("id");
                    this.ValidateProperty("id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("id");
                    this.OnidChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._api_key;
        }
    }
}
