//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace MoodWeather.CityListService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CityLists", Namespace="http://schemas.datacontract.org/2004/07/MoodWeather.Service.Web")]
    public partial class CityLists : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ActiveField;
        
        private string CityAlternativeField;
        
        private string CityNameField;
        
        private string CountryField;
        
        private string CountryCodeField;
        
        private string CountryCodeTeamcoField;
        
        private System.DateTime DateAddField;
        
        private System.DateTime DateModifiedField;
        
        private int IdField;
        
        private string UserIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((object.ReferenceEquals(this.ActiveField, value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CityAlternative {
            get {
                return this.CityAlternativeField;
            }
            set {
                if ((object.ReferenceEquals(this.CityAlternativeField, value) != true)) {
                    this.CityAlternativeField = value;
                    this.RaisePropertyChanged("CityAlternative");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CityName {
            get {
                return this.CityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CityNameField, value) != true)) {
                    this.CityNameField = value;
                    this.RaisePropertyChanged("CityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryCode {
            get {
                return this.CountryCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryCodeField, value) != true)) {
                    this.CountryCodeField = value;
                    this.RaisePropertyChanged("CountryCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryCodeTeamco {
            get {
                return this.CountryCodeTeamcoField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryCodeTeamcoField, value) != true)) {
                    this.CountryCodeTeamcoField = value;
                    this.RaisePropertyChanged("CountryCodeTeamco");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateAdd {
            get {
                return this.DateAddField;
            }
            set {
                if ((this.DateAddField.Equals(value) != true)) {
                    this.DateAddField = value;
                    this.RaisePropertyChanged("DateAdd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateModified {
            get {
                return this.DateModifiedField;
            }
            set {
                if ((this.DateModifiedField.Equals(value) != true)) {
                    this.DateModifiedField = value;
                    this.RaisePropertyChanged("DateModified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CityListService.ICityService")]
    public interface ICityService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICityService/GetCityList", ReplyAction="http://tempuri.org/ICityService/GetCityListResponse")]
        System.IAsyncResult BeginGetCityList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<MoodWeather.CityListService.CityLists> EndGetCityList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICityService/InsertCity", ReplyAction="http://tempuri.org/ICityService/InsertCityResponse")]
        System.IAsyncResult BeginInsertCity(string city, string cityalternative, string country, string countryCode, string countryCodeTeamco, string userId, string active, System.AsyncCallback callback, object asyncState);
        
        void EndInsertCity(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICityService/DeleteCity", ReplyAction="http://tempuri.org/ICityService/DeleteCityResponse")]
        System.IAsyncResult BeginDeleteCity(int id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteCity(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICityService/UpdateCity", ReplyAction="http://tempuri.org/ICityService/UpdateCityResponse")]
        System.IAsyncResult BeginUpdateCity(int id, string city, string cityalternative, string country, string countryCode, string countryCodeTeamco, string userId, string active, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateCity(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICityServiceChannel : MoodWeather.CityListService.ICityService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCityListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCityListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<MoodWeather.CityListService.CityLists> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<MoodWeather.CityListService.CityLists>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CityServiceClient : System.ServiceModel.ClientBase<MoodWeather.CityListService.ICityService>, MoodWeather.CityListService.ICityService {
        
        private BeginOperationDelegate onBeginGetCityListDelegate;
        
        private EndOperationDelegate onEndGetCityListDelegate;
        
        private System.Threading.SendOrPostCallback onGetCityListCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertCityDelegate;
        
        private EndOperationDelegate onEndInsertCityDelegate;
        
        private System.Threading.SendOrPostCallback onInsertCityCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteCityDelegate;
        
        private EndOperationDelegate onEndDeleteCityDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteCityCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateCityDelegate;
        
        private EndOperationDelegate onEndUpdateCityDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCityCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public CityServiceClient() {
        }
        
        public CityServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CityServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CityServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CityServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetCityListCompletedEventArgs> GetCityListCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InsertCityCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteCityCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateCityCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoodWeather.CityListService.ICityService.BeginGetCityList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCityList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<MoodWeather.CityListService.CityLists> MoodWeather.CityListService.ICityService.EndGetCityList(System.IAsyncResult result) {
            return base.Channel.EndGetCityList(result);
        }
        
        private System.IAsyncResult OnBeginGetCityList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((MoodWeather.CityListService.ICityService)(this)).BeginGetCityList(callback, asyncState);
        }
        
        private object[] OnEndGetCityList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<MoodWeather.CityListService.CityLists> retVal = ((MoodWeather.CityListService.ICityService)(this)).EndGetCityList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCityListCompleted(object state) {
            if ((this.GetCityListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCityListCompleted(this, new GetCityListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCityListAsync() {
            this.GetCityListAsync(null);
        }
        
        public void GetCityListAsync(object userState) {
            if ((this.onBeginGetCityListDelegate == null)) {
                this.onBeginGetCityListDelegate = new BeginOperationDelegate(this.OnBeginGetCityList);
            }
            if ((this.onEndGetCityListDelegate == null)) {
                this.onEndGetCityListDelegate = new EndOperationDelegate(this.OnEndGetCityList);
            }
            if ((this.onGetCityListCompletedDelegate == null)) {
                this.onGetCityListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCityListCompleted);
            }
            base.InvokeAsync(this.onBeginGetCityListDelegate, null, this.onEndGetCityListDelegate, this.onGetCityListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoodWeather.CityListService.ICityService.BeginInsertCity(string city, string cityalternative, string country, string countryCode, string countryCodeTeamco, string userId, string active, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertCity(city, cityalternative, country, countryCode, countryCodeTeamco, userId, active, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoodWeather.CityListService.ICityService.EndInsertCity(System.IAsyncResult result) {
            base.Channel.EndInsertCity(result);
        }
        
        private System.IAsyncResult OnBeginInsertCity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string city = ((string)(inValues[0]));
            string cityalternative = ((string)(inValues[1]));
            string country = ((string)(inValues[2]));
            string countryCode = ((string)(inValues[3]));
            string countryCodeTeamco = ((string)(inValues[4]));
            string userId = ((string)(inValues[5]));
            string active = ((string)(inValues[6]));
            return ((MoodWeather.CityListService.ICityService)(this)).BeginInsertCity(city, cityalternative, country, countryCode, countryCodeTeamco, userId, active, callback, asyncState);
        }
        
        private object[] OnEndInsertCity(System.IAsyncResult result) {
            ((MoodWeather.CityListService.ICityService)(this)).EndInsertCity(result);
            return null;
        }
        
        private void OnInsertCityCompleted(object state) {
            if ((this.InsertCityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertCityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertCityAsync(string city, string cityalternative, string country, string countryCode, string countryCodeTeamco, string userId, string active) {
            this.InsertCityAsync(city, cityalternative, country, countryCode, countryCodeTeamco, userId, active, null);
        }
        
        public void InsertCityAsync(string city, string cityalternative, string country, string countryCode, string countryCodeTeamco, string userId, string active, object userState) {
            if ((this.onBeginInsertCityDelegate == null)) {
                this.onBeginInsertCityDelegate = new BeginOperationDelegate(this.OnBeginInsertCity);
            }
            if ((this.onEndInsertCityDelegate == null)) {
                this.onEndInsertCityDelegate = new EndOperationDelegate(this.OnEndInsertCity);
            }
            if ((this.onInsertCityCompletedDelegate == null)) {
                this.onInsertCityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertCityCompleted);
            }
            base.InvokeAsync(this.onBeginInsertCityDelegate, new object[] {
                        city,
                        cityalternative,
                        country,
                        countryCode,
                        countryCodeTeamco,
                        userId,
                        active}, this.onEndInsertCityDelegate, this.onInsertCityCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoodWeather.CityListService.ICityService.BeginDeleteCity(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteCity(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoodWeather.CityListService.ICityService.EndDeleteCity(System.IAsyncResult result) {
            base.Channel.EndDeleteCity(result);
        }
        
        private System.IAsyncResult OnBeginDeleteCity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return ((MoodWeather.CityListService.ICityService)(this)).BeginDeleteCity(id, callback, asyncState);
        }
        
        private object[] OnEndDeleteCity(System.IAsyncResult result) {
            ((MoodWeather.CityListService.ICityService)(this)).EndDeleteCity(result);
            return null;
        }
        
        private void OnDeleteCityCompleted(object state) {
            if ((this.DeleteCityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteCityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteCityAsync(int id) {
            this.DeleteCityAsync(id, null);
        }
        
        public void DeleteCityAsync(int id, object userState) {
            if ((this.onBeginDeleteCityDelegate == null)) {
                this.onBeginDeleteCityDelegate = new BeginOperationDelegate(this.OnBeginDeleteCity);
            }
            if ((this.onEndDeleteCityDelegate == null)) {
                this.onEndDeleteCityDelegate = new EndOperationDelegate(this.OnEndDeleteCity);
            }
            if ((this.onDeleteCityCompletedDelegate == null)) {
                this.onDeleteCityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteCityCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteCityDelegate, new object[] {
                        id}, this.onEndDeleteCityDelegate, this.onDeleteCityCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoodWeather.CityListService.ICityService.BeginUpdateCity(int id, string city, string cityalternative, string country, string countryCode, string countryCodeTeamco, string userId, string active, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateCity(id, city, cityalternative, country, countryCode, countryCodeTeamco, userId, active, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoodWeather.CityListService.ICityService.EndUpdateCity(System.IAsyncResult result) {
            base.Channel.EndUpdateCity(result);
        }
        
        private System.IAsyncResult OnBeginUpdateCity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            string city = ((string)(inValues[1]));
            string cityalternative = ((string)(inValues[2]));
            string country = ((string)(inValues[3]));
            string countryCode = ((string)(inValues[4]));
            string countryCodeTeamco = ((string)(inValues[5]));
            string userId = ((string)(inValues[6]));
            string active = ((string)(inValues[7]));
            return ((MoodWeather.CityListService.ICityService)(this)).BeginUpdateCity(id, city, cityalternative, country, countryCode, countryCodeTeamco, userId, active, callback, asyncState);
        }
        
        private object[] OnEndUpdateCity(System.IAsyncResult result) {
            ((MoodWeather.CityListService.ICityService)(this)).EndUpdateCity(result);
            return null;
        }
        
        private void OnUpdateCityCompleted(object state) {
            if ((this.UpdateCityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateCityAsync(int id, string city, string cityalternative, string country, string countryCode, string countryCodeTeamco, string userId, string active) {
            this.UpdateCityAsync(id, city, cityalternative, country, countryCode, countryCodeTeamco, userId, active, null);
        }
        
        public void UpdateCityAsync(int id, string city, string cityalternative, string country, string countryCode, string countryCodeTeamco, string userId, string active, object userState) {
            if ((this.onBeginUpdateCityDelegate == null)) {
                this.onBeginUpdateCityDelegate = new BeginOperationDelegate(this.OnBeginUpdateCity);
            }
            if ((this.onEndUpdateCityDelegate == null)) {
                this.onEndUpdateCityDelegate = new EndOperationDelegate(this.OnEndUpdateCity);
            }
            if ((this.onUpdateCityCompletedDelegate == null)) {
                this.onUpdateCityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCityCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateCityDelegate, new object[] {
                        id,
                        city,
                        cityalternative,
                        country,
                        countryCode,
                        countryCodeTeamco,
                        userId,
                        active}, this.onEndUpdateCityDelegate, this.onUpdateCityCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override MoodWeather.CityListService.ICityService CreateChannel() {
            return new CityServiceClientChannel(this);
        }
        
        private class CityServiceClientChannel : ChannelBase<MoodWeather.CityListService.ICityService>, MoodWeather.CityListService.ICityService {
            
            public CityServiceClientChannel(System.ServiceModel.ClientBase<MoodWeather.CityListService.ICityService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetCityList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetCityList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<MoodWeather.CityListService.CityLists> EndGetCityList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<MoodWeather.CityListService.CityLists> _result = ((System.Collections.ObjectModel.ObservableCollection<MoodWeather.CityListService.CityLists>)(base.EndInvoke("GetCityList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInsertCity(string city, string cityalternative, string country, string countryCode, string countryCodeTeamco, string userId, string active, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = city;
                _args[1] = cityalternative;
                _args[2] = country;
                _args[3] = countryCode;
                _args[4] = countryCodeTeamco;
                _args[5] = userId;
                _args[6] = active;
                System.IAsyncResult _result = base.BeginInvoke("InsertCity", _args, callback, asyncState);
                return _result;
            }
            
            public void EndInsertCity(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("InsertCity", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteCity(int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteCity", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteCity(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteCity", _args, result);
            }
            
            public System.IAsyncResult BeginUpdateCity(int id, string city, string cityalternative, string country, string countryCode, string countryCodeTeamco, string userId, string active, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = id;
                _args[1] = city;
                _args[2] = cityalternative;
                _args[3] = country;
                _args[4] = countryCode;
                _args[5] = countryCodeTeamco;
                _args[6] = userId;
                _args[7] = active;
                System.IAsyncResult _result = base.BeginInvoke("UpdateCity", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateCity(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateCity", _args, result);
            }
        }
    }
}
