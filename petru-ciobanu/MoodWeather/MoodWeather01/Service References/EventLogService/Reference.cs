//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace MoodWeather.EventLogService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventSources", Namespace="http://schemas.datacontract.org/2004/07/MoodWeather.Service.Web")]
    public partial class EventSources : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string EventIdField;
        
        private string IndexField;
        
        private string LevelField;
        
        private string MessageField;
        
        private string SourceField;
        
        private string TimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventId {
            get {
                return this.EventIdField;
            }
            set {
                if ((object.ReferenceEquals(this.EventIdField, value) != true)) {
                    this.EventIdField = value;
                    this.RaisePropertyChanged("EventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Index {
            get {
                return this.IndexField;
            }
            set {
                if ((object.ReferenceEquals(this.IndexField, value) != true)) {
                    this.IndexField = value;
                    this.RaisePropertyChanged("Index");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Level {
            get {
                return this.LevelField;
            }
            set {
                if ((object.ReferenceEquals(this.LevelField, value) != true)) {
                    this.LevelField = value;
                    this.RaisePropertyChanged("Level");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Source {
            get {
                return this.SourceField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceField, value) != true)) {
                    this.SourceField = value;
                    this.RaisePropertyChanged("Source");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Time {
            get {
                return this.TimeField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeField, value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EventLogService.IEventLogService")]
    public interface IEventLogService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEventLogService/GetEvents", ReplyAction="http://tempuri.org/IEventLogService/GetEventsResponse")]
        System.IAsyncResult BeginGetEvents(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<MoodWeather.EventLogService.EventSources> EndGetEvents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEventLogService/DeleteEvents", ReplyAction="http://tempuri.org/IEventLogService/DeleteEventsResponse")]
        System.IAsyncResult BeginDeleteEvents(string test, System.AsyncCallback callback, object asyncState);
        
        string EndDeleteEvents(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEventLogServiceChannel : MoodWeather.EventLogService.IEventLogService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<MoodWeather.EventLogService.EventSources> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<MoodWeather.EventLogService.EventSources>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EventLogServiceClient : System.ServiceModel.ClientBase<MoodWeather.EventLogService.IEventLogService>, MoodWeather.EventLogService.IEventLogService {
        
        private BeginOperationDelegate onBeginGetEventsDelegate;
        
        private EndOperationDelegate onEndGetEventsDelegate;
        
        private System.Threading.SendOrPostCallback onGetEventsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteEventsDelegate;
        
        private EndOperationDelegate onEndDeleteEventsDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteEventsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public EventLogServiceClient() {
        }
        
        public EventLogServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EventLogServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventLogServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventLogServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetEventsCompletedEventArgs> GetEventsCompleted;
        
        public event System.EventHandler<DeleteEventsCompletedEventArgs> DeleteEventsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoodWeather.EventLogService.IEventLogService.BeginGetEvents(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEvents(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<MoodWeather.EventLogService.EventSources> MoodWeather.EventLogService.IEventLogService.EndGetEvents(System.IAsyncResult result) {
            return base.Channel.EndGetEvents(result);
        }
        
        private System.IAsyncResult OnBeginGetEvents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((MoodWeather.EventLogService.IEventLogService)(this)).BeginGetEvents(callback, asyncState);
        }
        
        private object[] OnEndGetEvents(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<MoodWeather.EventLogService.EventSources> retVal = ((MoodWeather.EventLogService.IEventLogService)(this)).EndGetEvents(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEventsCompleted(object state) {
            if ((this.GetEventsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEventsCompleted(this, new GetEventsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEventsAsync() {
            this.GetEventsAsync(null);
        }
        
        public void GetEventsAsync(object userState) {
            if ((this.onBeginGetEventsDelegate == null)) {
                this.onBeginGetEventsDelegate = new BeginOperationDelegate(this.OnBeginGetEvents);
            }
            if ((this.onEndGetEventsDelegate == null)) {
                this.onEndGetEventsDelegate = new EndOperationDelegate(this.OnEndGetEvents);
            }
            if ((this.onGetEventsCompletedDelegate == null)) {
                this.onGetEventsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEventsCompleted);
            }
            base.InvokeAsync(this.onBeginGetEventsDelegate, null, this.onEndGetEventsDelegate, this.onGetEventsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoodWeather.EventLogService.IEventLogService.BeginDeleteEvents(string test, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteEvents(test, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string MoodWeather.EventLogService.IEventLogService.EndDeleteEvents(System.IAsyncResult result) {
            return base.Channel.EndDeleteEvents(result);
        }
        
        private System.IAsyncResult OnBeginDeleteEvents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string test = ((string)(inValues[0]));
            return ((MoodWeather.EventLogService.IEventLogService)(this)).BeginDeleteEvents(test, callback, asyncState);
        }
        
        private object[] OnEndDeleteEvents(System.IAsyncResult result) {
            string retVal = ((MoodWeather.EventLogService.IEventLogService)(this)).EndDeleteEvents(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteEventsCompleted(object state) {
            if ((this.DeleteEventsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteEventsCompleted(this, new DeleteEventsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteEventsAsync(string test) {
            this.DeleteEventsAsync(test, null);
        }
        
        public void DeleteEventsAsync(string test, object userState) {
            if ((this.onBeginDeleteEventsDelegate == null)) {
                this.onBeginDeleteEventsDelegate = new BeginOperationDelegate(this.OnBeginDeleteEvents);
            }
            if ((this.onEndDeleteEventsDelegate == null)) {
                this.onEndDeleteEventsDelegate = new EndOperationDelegate(this.OnEndDeleteEvents);
            }
            if ((this.onDeleteEventsCompletedDelegate == null)) {
                this.onDeleteEventsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteEventsCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteEventsDelegate, new object[] {
                        test}, this.onEndDeleteEventsDelegate, this.onDeleteEventsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override MoodWeather.EventLogService.IEventLogService CreateChannel() {
            return new EventLogServiceClientChannel(this);
        }
        
        private class EventLogServiceClientChannel : ChannelBase<MoodWeather.EventLogService.IEventLogService>, MoodWeather.EventLogService.IEventLogService {
            
            public EventLogServiceClientChannel(System.ServiceModel.ClientBase<MoodWeather.EventLogService.IEventLogService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetEvents(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetEvents", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<MoodWeather.EventLogService.EventSources> EndGetEvents(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<MoodWeather.EventLogService.EventSources> _result = ((System.Collections.ObjectModel.ObservableCollection<MoodWeather.EventLogService.EventSources>)(base.EndInvoke("GetEvents", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteEvents(string test, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = test;
                System.IAsyncResult _result = base.BeginInvoke("DeleteEvents", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDeleteEvents(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DeleteEvents", _args, result)));
                return _result;
            }
        }
    }
}
