//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace MoodWeather.WeatherService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CityList", Namespace="http://schemas.datacontract.org/2004/07/MoodWeather.Service.Web")]
    public partial class CityList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CityAlternativeField;
        
        private string CityIdField;
        
        private string CityNameField;
        
        private string CountryCodeField;
        
        private string CountryCodeTeamcoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CityAlternative {
            get {
                return this.CityAlternativeField;
            }
            set {
                if ((object.ReferenceEquals(this.CityAlternativeField, value) != true)) {
                    this.CityAlternativeField = value;
                    this.RaisePropertyChanged("CityAlternative");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CityId {
            get {
                return this.CityIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CityIdField, value) != true)) {
                    this.CityIdField = value;
                    this.RaisePropertyChanged("CityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CityName {
            get {
                return this.CityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CityNameField, value) != true)) {
                    this.CityNameField = value;
                    this.RaisePropertyChanged("CityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryCode {
            get {
                return this.CountryCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryCodeField, value) != true)) {
                    this.CountryCodeField = value;
                    this.RaisePropertyChanged("CountryCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryCodeTeamco {
            get {
                return this.CountryCodeTeamcoField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryCodeTeamcoField, value) != true)) {
                    this.CountryCodeTeamcoField = value;
                    this.RaisePropertyChanged("CountryCodeTeamco");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WeatherCondition", Namespace="http://schemas.datacontract.org/2004/07/MoodWeather.Service.Web")]
    public partial class WeatherCondition : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CityNameField;
        
        private string ConditionField;
        
        private string CountryCodeField;
        
        private System.DateTime DateField;
        
        private string IconField;
        
        private int IdField;
        
        private System.DateTime LastUpdateField;
        
        private string SkyIconField;
        
        private string SunriseField;
        
        private string SunsetField;
        
        private string TempHighField;
        
        private string TempLowField;
        
        private string UpdateByField;
        
        private string WeekDayField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CityName {
            get {
                return this.CityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CityNameField, value) != true)) {
                    this.CityNameField = value;
                    this.RaisePropertyChanged("CityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Condition {
            get {
                return this.ConditionField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionField, value) != true)) {
                    this.ConditionField = value;
                    this.RaisePropertyChanged("Condition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryCode {
            get {
                return this.CountryCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryCodeField, value) != true)) {
                    this.CountryCodeField = value;
                    this.RaisePropertyChanged("CountryCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Icon {
            get {
                return this.IconField;
            }
            set {
                if ((object.ReferenceEquals(this.IconField, value) != true)) {
                    this.IconField = value;
                    this.RaisePropertyChanged("Icon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdate {
            get {
                return this.LastUpdateField;
            }
            set {
                if ((this.LastUpdateField.Equals(value) != true)) {
                    this.LastUpdateField = value;
                    this.RaisePropertyChanged("LastUpdate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SkyIcon {
            get {
                return this.SkyIconField;
            }
            set {
                if ((object.ReferenceEquals(this.SkyIconField, value) != true)) {
                    this.SkyIconField = value;
                    this.RaisePropertyChanged("SkyIcon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sunrise {
            get {
                return this.SunriseField;
            }
            set {
                if ((object.ReferenceEquals(this.SunriseField, value) != true)) {
                    this.SunriseField = value;
                    this.RaisePropertyChanged("Sunrise");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sunset {
            get {
                return this.SunsetField;
            }
            set {
                if ((object.ReferenceEquals(this.SunsetField, value) != true)) {
                    this.SunsetField = value;
                    this.RaisePropertyChanged("Sunset");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TempHigh {
            get {
                return this.TempHighField;
            }
            set {
                if ((object.ReferenceEquals(this.TempHighField, value) != true)) {
                    this.TempHighField = value;
                    this.RaisePropertyChanged("TempHigh");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TempLow {
            get {
                return this.TempLowField;
            }
            set {
                if ((object.ReferenceEquals(this.TempLowField, value) != true)) {
                    this.TempLowField = value;
                    this.RaisePropertyChanged("TempLow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UpdateBy {
            get {
                return this.UpdateByField;
            }
            set {
                if ((object.ReferenceEquals(this.UpdateByField, value) != true)) {
                    this.UpdateByField = value;
                    this.RaisePropertyChanged("UpdateBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WeekDay {
            get {
                return this.WeekDayField;
            }
            set {
                if ((object.ReferenceEquals(this.WeekDayField, value) != true)) {
                    this.WeekDayField = value;
                    this.RaisePropertyChanged("WeekDay");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WeatherService.IWeatherService")]
    public interface IWeatherService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWeatherService/CheckCity", ReplyAction="http://tempuri.org/IWeatherService/CheckCityResponse")]
        System.IAsyncResult BeginCheckCity(string cityName, string countryCode, System.AsyncCallback callback, object asyncState);
        
        string EndCheckCity(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWeatherService/SelectCity", ReplyAction="http://tempuri.org/IWeatherService/SelectCityResponse")]
        System.IAsyncResult BeginSelectCity(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<MoodWeather.WeatherService.CityList> EndSelectCity(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWeatherService/GetCityLists", ReplyAction="http://tempuri.org/IWeatherService/GetCityListsResponse")]
        System.IAsyncResult BeginGetCityLists(System.AsyncCallback callback, object asyncState);
        
        void EndGetCityLists(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWeatherService/GetWeatherForecast", ReplyAction="http://tempuri.org/IWeatherService/GetWeatherForecastResponse")]
        System.IAsyncResult BeginGetWeatherForecast(string countryCode, string countryCodeTeamco, string city, string cityalternative, string commandType, string cityId, System.AsyncCallback callback, object asyncState);
        
        void EndGetWeatherForecast(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWeatherService/InsertData", ReplyAction="http://tempuri.org/IWeatherService/InsertDataResponse")]
        System.IAsyncResult BeginInsertData(string cityName, string cityId, string countryCode, string condition, string sunrise, string sunset, string tempLow, string tempHigh, string icon, string skyIcon, System.DateTime date, string weekDay, string updateBy, System.AsyncCallback callback, object asyncState);
        
        void EndInsertData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWeatherService/GetCityCondition", ReplyAction="http://tempuri.org/IWeatherService/GetCityConditionResponse")]
        System.IAsyncResult BeginGetCityCondition(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<MoodWeather.WeatherService.WeatherCondition> EndGetCityCondition(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWeatherService/SelectCityCondition", ReplyAction="http://tempuri.org/IWeatherService/SelectCityConditionResponse")]
        System.IAsyncResult BeginSelectCityCondition(string cityName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<MoodWeather.WeatherService.WeatherCondition> EndSelectCityCondition(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWeatherService/StartDataCollect", ReplyAction="http://tempuri.org/IWeatherService/StartDataCollectResponse")]
        System.IAsyncResult BeginStartDataCollect(string command, System.AsyncCallback callback, object asyncState);
        
        void EndStartDataCollect(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWeatherService/DeleteDatabase", ReplyAction="http://tempuri.org/IWeatherService/DeleteDatabaseResponse")]
        System.IAsyncResult BeginDeleteDatabase(System.AsyncCallback callback, object asyncState);
        
        void EndDeleteDatabase(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWeatherService/WriteToLog", ReplyAction="http://tempuri.org/IWeatherService/WriteToLogResponse")]
        System.IAsyncResult BeginWriteToLog(string msg, System.AsyncCallback callback, object asyncState);
        
        void EndWriteToLog(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWeatherService/SaveXmlFile", ReplyAction="http://tempuri.org/IWeatherService/SaveXmlFileResponse")]
        System.IAsyncResult BeginSaveXmlFile(System.AsyncCallback callback, object asyncState);
        
        void EndSaveXmlFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWeatherService/UploadFileFtpAutomate", ReplyAction="http://tempuri.org/IWeatherService/UploadFileFtpAutomateResponse")]
        System.IAsyncResult BeginUploadFileFtpAutomate(string fileStream, System.AsyncCallback callback, object asyncState);
        
        string EndUploadFileFtpAutomate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWeatherService/CreateXmlBackup", ReplyAction="http://tempuri.org/IWeatherService/CreateXmlBackupResponse")]
        System.IAsyncResult BeginCreateXmlBackup(string fileName, string content, System.AsyncCallback callback, object asyncState);
        
        void EndCreateXmlBackup(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWeatherServiceChannel : MoodWeather.WeatherService.IWeatherService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckCityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckCityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SelectCityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SelectCityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<MoodWeather.WeatherService.CityList> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<MoodWeather.WeatherService.CityList>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCityConditionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCityConditionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<MoodWeather.WeatherService.WeatherCondition> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<MoodWeather.WeatherService.WeatherCondition>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SelectCityConditionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SelectCityConditionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<MoodWeather.WeatherService.WeatherCondition> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<MoodWeather.WeatherService.WeatherCondition>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UploadFileFtpAutomateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UploadFileFtpAutomateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WeatherServiceClient : System.ServiceModel.ClientBase<MoodWeather.WeatherService.IWeatherService>, MoodWeather.WeatherService.IWeatherService {
        
        private BeginOperationDelegate onBeginCheckCityDelegate;
        
        private EndOperationDelegate onEndCheckCityDelegate;
        
        private System.Threading.SendOrPostCallback onCheckCityCompletedDelegate;
        
        private BeginOperationDelegate onBeginSelectCityDelegate;
        
        private EndOperationDelegate onEndSelectCityDelegate;
        
        private System.Threading.SendOrPostCallback onSelectCityCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCityListsDelegate;
        
        private EndOperationDelegate onEndGetCityListsDelegate;
        
        private System.Threading.SendOrPostCallback onGetCityListsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWeatherForecastDelegate;
        
        private EndOperationDelegate onEndGetWeatherForecastDelegate;
        
        private System.Threading.SendOrPostCallback onGetWeatherForecastCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertDataDelegate;
        
        private EndOperationDelegate onEndInsertDataDelegate;
        
        private System.Threading.SendOrPostCallback onInsertDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCityConditionDelegate;
        
        private EndOperationDelegate onEndGetCityConditionDelegate;
        
        private System.Threading.SendOrPostCallback onGetCityConditionCompletedDelegate;
        
        private BeginOperationDelegate onBeginSelectCityConditionDelegate;
        
        private EndOperationDelegate onEndSelectCityConditionDelegate;
        
        private System.Threading.SendOrPostCallback onSelectCityConditionCompletedDelegate;
        
        private BeginOperationDelegate onBeginStartDataCollectDelegate;
        
        private EndOperationDelegate onEndStartDataCollectDelegate;
        
        private System.Threading.SendOrPostCallback onStartDataCollectCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteDatabaseDelegate;
        
        private EndOperationDelegate onEndDeleteDatabaseDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteDatabaseCompletedDelegate;
        
        private BeginOperationDelegate onBeginWriteToLogDelegate;
        
        private EndOperationDelegate onEndWriteToLogDelegate;
        
        private System.Threading.SendOrPostCallback onWriteToLogCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveXmlFileDelegate;
        
        private EndOperationDelegate onEndSaveXmlFileDelegate;
        
        private System.Threading.SendOrPostCallback onSaveXmlFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadFileFtpAutomateDelegate;
        
        private EndOperationDelegate onEndUploadFileFtpAutomateDelegate;
        
        private System.Threading.SendOrPostCallback onUploadFileFtpAutomateCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateXmlBackupDelegate;
        
        private EndOperationDelegate onEndCreateXmlBackupDelegate;
        
        private System.Threading.SendOrPostCallback onCreateXmlBackupCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public WeatherServiceClient() {
        }
        
        public WeatherServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WeatherServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<CheckCityCompletedEventArgs> CheckCityCompleted;
        
        public event System.EventHandler<SelectCityCompletedEventArgs> SelectCityCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> GetCityListsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> GetWeatherForecastCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InsertDataCompleted;
        
        public event System.EventHandler<GetCityConditionCompletedEventArgs> GetCityConditionCompleted;
        
        public event System.EventHandler<SelectCityConditionCompletedEventArgs> SelectCityConditionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> StartDataCollectCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteDatabaseCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> WriteToLogCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveXmlFileCompleted;
        
        public event System.EventHandler<UploadFileFtpAutomateCompletedEventArgs> UploadFileFtpAutomateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CreateXmlBackupCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoodWeather.WeatherService.IWeatherService.BeginCheckCity(string cityName, string countryCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckCity(cityName, countryCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string MoodWeather.WeatherService.IWeatherService.EndCheckCity(System.IAsyncResult result) {
            return base.Channel.EndCheckCity(result);
        }
        
        private System.IAsyncResult OnBeginCheckCity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string cityName = ((string)(inValues[0]));
            string countryCode = ((string)(inValues[1]));
            return ((MoodWeather.WeatherService.IWeatherService)(this)).BeginCheckCity(cityName, countryCode, callback, asyncState);
        }
        
        private object[] OnEndCheckCity(System.IAsyncResult result) {
            string retVal = ((MoodWeather.WeatherService.IWeatherService)(this)).EndCheckCity(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckCityCompleted(object state) {
            if ((this.CheckCityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckCityCompleted(this, new CheckCityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckCityAsync(string cityName, string countryCode) {
            this.CheckCityAsync(cityName, countryCode, null);
        }
        
        public void CheckCityAsync(string cityName, string countryCode, object userState) {
            if ((this.onBeginCheckCityDelegate == null)) {
                this.onBeginCheckCityDelegate = new BeginOperationDelegate(this.OnBeginCheckCity);
            }
            if ((this.onEndCheckCityDelegate == null)) {
                this.onEndCheckCityDelegate = new EndOperationDelegate(this.OnEndCheckCity);
            }
            if ((this.onCheckCityCompletedDelegate == null)) {
                this.onCheckCityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckCityCompleted);
            }
            base.InvokeAsync(this.onBeginCheckCityDelegate, new object[] {
                        cityName,
                        countryCode}, this.onEndCheckCityDelegate, this.onCheckCityCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoodWeather.WeatherService.IWeatherService.BeginSelectCity(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSelectCity(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<MoodWeather.WeatherService.CityList> MoodWeather.WeatherService.IWeatherService.EndSelectCity(System.IAsyncResult result) {
            return base.Channel.EndSelectCity(result);
        }
        
        private System.IAsyncResult OnBeginSelectCity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((MoodWeather.WeatherService.IWeatherService)(this)).BeginSelectCity(callback, asyncState);
        }
        
        private object[] OnEndSelectCity(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<MoodWeather.WeatherService.CityList> retVal = ((MoodWeather.WeatherService.IWeatherService)(this)).EndSelectCity(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSelectCityCompleted(object state) {
            if ((this.SelectCityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SelectCityCompleted(this, new SelectCityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SelectCityAsync() {
            this.SelectCityAsync(null);
        }
        
        public void SelectCityAsync(object userState) {
            if ((this.onBeginSelectCityDelegate == null)) {
                this.onBeginSelectCityDelegate = new BeginOperationDelegate(this.OnBeginSelectCity);
            }
            if ((this.onEndSelectCityDelegate == null)) {
                this.onEndSelectCityDelegate = new EndOperationDelegate(this.OnEndSelectCity);
            }
            if ((this.onSelectCityCompletedDelegate == null)) {
                this.onSelectCityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSelectCityCompleted);
            }
            base.InvokeAsync(this.onBeginSelectCityDelegate, null, this.onEndSelectCityDelegate, this.onSelectCityCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoodWeather.WeatherService.IWeatherService.BeginGetCityLists(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCityLists(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoodWeather.WeatherService.IWeatherService.EndGetCityLists(System.IAsyncResult result) {
            base.Channel.EndGetCityLists(result);
        }
        
        private System.IAsyncResult OnBeginGetCityLists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((MoodWeather.WeatherService.IWeatherService)(this)).BeginGetCityLists(callback, asyncState);
        }
        
        private object[] OnEndGetCityLists(System.IAsyncResult result) {
            ((MoodWeather.WeatherService.IWeatherService)(this)).EndGetCityLists(result);
            return null;
        }
        
        private void OnGetCityListsCompleted(object state) {
            if ((this.GetCityListsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCityListsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCityListsAsync() {
            this.GetCityListsAsync(null);
        }
        
        public void GetCityListsAsync(object userState) {
            if ((this.onBeginGetCityListsDelegate == null)) {
                this.onBeginGetCityListsDelegate = new BeginOperationDelegate(this.OnBeginGetCityLists);
            }
            if ((this.onEndGetCityListsDelegate == null)) {
                this.onEndGetCityListsDelegate = new EndOperationDelegate(this.OnEndGetCityLists);
            }
            if ((this.onGetCityListsCompletedDelegate == null)) {
                this.onGetCityListsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCityListsCompleted);
            }
            base.InvokeAsync(this.onBeginGetCityListsDelegate, null, this.onEndGetCityListsDelegate, this.onGetCityListsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoodWeather.WeatherService.IWeatherService.BeginGetWeatherForecast(string countryCode, string countryCodeTeamco, string city, string cityalternative, string commandType, string cityId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWeatherForecast(countryCode, countryCodeTeamco, city, cityalternative, commandType, cityId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoodWeather.WeatherService.IWeatherService.EndGetWeatherForecast(System.IAsyncResult result) {
            base.Channel.EndGetWeatherForecast(result);
        }
        
        private System.IAsyncResult OnBeginGetWeatherForecast(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string countryCode = ((string)(inValues[0]));
            string countryCodeTeamco = ((string)(inValues[1]));
            string city = ((string)(inValues[2]));
            string cityalternative = ((string)(inValues[3]));
            string commandType = ((string)(inValues[4]));
            string cityId = ((string)(inValues[5]));
            return ((MoodWeather.WeatherService.IWeatherService)(this)).BeginGetWeatherForecast(countryCode, countryCodeTeamco, city, cityalternative, commandType, cityId, callback, asyncState);
        }
        
        private object[] OnEndGetWeatherForecast(System.IAsyncResult result) {
            ((MoodWeather.WeatherService.IWeatherService)(this)).EndGetWeatherForecast(result);
            return null;
        }
        
        private void OnGetWeatherForecastCompleted(object state) {
            if ((this.GetWeatherForecastCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWeatherForecastCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWeatherForecastAsync(string countryCode, string countryCodeTeamco, string city, string cityalternative, string commandType, string cityId) {
            this.GetWeatherForecastAsync(countryCode, countryCodeTeamco, city, cityalternative, commandType, cityId, null);
        }
        
        public void GetWeatherForecastAsync(string countryCode, string countryCodeTeamco, string city, string cityalternative, string commandType, string cityId, object userState) {
            if ((this.onBeginGetWeatherForecastDelegate == null)) {
                this.onBeginGetWeatherForecastDelegate = new BeginOperationDelegate(this.OnBeginGetWeatherForecast);
            }
            if ((this.onEndGetWeatherForecastDelegate == null)) {
                this.onEndGetWeatherForecastDelegate = new EndOperationDelegate(this.OnEndGetWeatherForecast);
            }
            if ((this.onGetWeatherForecastCompletedDelegate == null)) {
                this.onGetWeatherForecastCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWeatherForecastCompleted);
            }
            base.InvokeAsync(this.onBeginGetWeatherForecastDelegate, new object[] {
                        countryCode,
                        countryCodeTeamco,
                        city,
                        cityalternative,
                        commandType,
                        cityId}, this.onEndGetWeatherForecastDelegate, this.onGetWeatherForecastCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoodWeather.WeatherService.IWeatherService.BeginInsertData(string cityName, string cityId, string countryCode, string condition, string sunrise, string sunset, string tempLow, string tempHigh, string icon, string skyIcon, System.DateTime date, string weekDay, string updateBy, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertData(cityName, cityId, countryCode, condition, sunrise, sunset, tempLow, tempHigh, icon, skyIcon, date, weekDay, updateBy, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoodWeather.WeatherService.IWeatherService.EndInsertData(System.IAsyncResult result) {
            base.Channel.EndInsertData(result);
        }
        
        private System.IAsyncResult OnBeginInsertData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string cityName = ((string)(inValues[0]));
            string cityId = ((string)(inValues[1]));
            string countryCode = ((string)(inValues[2]));
            string condition = ((string)(inValues[3]));
            string sunrise = ((string)(inValues[4]));
            string sunset = ((string)(inValues[5]));
            string tempLow = ((string)(inValues[6]));
            string tempHigh = ((string)(inValues[7]));
            string icon = ((string)(inValues[8]));
            string skyIcon = ((string)(inValues[9]));
            System.DateTime date = ((System.DateTime)(inValues[10]));
            string weekDay = ((string)(inValues[11]));
            string updateBy = ((string)(inValues[12]));
            return ((MoodWeather.WeatherService.IWeatherService)(this)).BeginInsertData(cityName, cityId, countryCode, condition, sunrise, sunset, tempLow, tempHigh, icon, skyIcon, date, weekDay, updateBy, callback, asyncState);
        }
        
        private object[] OnEndInsertData(System.IAsyncResult result) {
            ((MoodWeather.WeatherService.IWeatherService)(this)).EndInsertData(result);
            return null;
        }
        
        private void OnInsertDataCompleted(object state) {
            if ((this.InsertDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertDataAsync(string cityName, string cityId, string countryCode, string condition, string sunrise, string sunset, string tempLow, string tempHigh, string icon, string skyIcon, System.DateTime date, string weekDay, string updateBy) {
            this.InsertDataAsync(cityName, cityId, countryCode, condition, sunrise, sunset, tempLow, tempHigh, icon, skyIcon, date, weekDay, updateBy, null);
        }
        
        public void InsertDataAsync(string cityName, string cityId, string countryCode, string condition, string sunrise, string sunset, string tempLow, string tempHigh, string icon, string skyIcon, System.DateTime date, string weekDay, string updateBy, object userState) {
            if ((this.onBeginInsertDataDelegate == null)) {
                this.onBeginInsertDataDelegate = new BeginOperationDelegate(this.OnBeginInsertData);
            }
            if ((this.onEndInsertDataDelegate == null)) {
                this.onEndInsertDataDelegate = new EndOperationDelegate(this.OnEndInsertData);
            }
            if ((this.onInsertDataCompletedDelegate == null)) {
                this.onInsertDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertDataCompleted);
            }
            base.InvokeAsync(this.onBeginInsertDataDelegate, new object[] {
                        cityName,
                        cityId,
                        countryCode,
                        condition,
                        sunrise,
                        sunset,
                        tempLow,
                        tempHigh,
                        icon,
                        skyIcon,
                        date,
                        weekDay,
                        updateBy}, this.onEndInsertDataDelegate, this.onInsertDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoodWeather.WeatherService.IWeatherService.BeginGetCityCondition(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCityCondition(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<MoodWeather.WeatherService.WeatherCondition> MoodWeather.WeatherService.IWeatherService.EndGetCityCondition(System.IAsyncResult result) {
            return base.Channel.EndGetCityCondition(result);
        }
        
        private System.IAsyncResult OnBeginGetCityCondition(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((MoodWeather.WeatherService.IWeatherService)(this)).BeginGetCityCondition(callback, asyncState);
        }
        
        private object[] OnEndGetCityCondition(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<MoodWeather.WeatherService.WeatherCondition> retVal = ((MoodWeather.WeatherService.IWeatherService)(this)).EndGetCityCondition(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCityConditionCompleted(object state) {
            if ((this.GetCityConditionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCityConditionCompleted(this, new GetCityConditionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCityConditionAsync() {
            this.GetCityConditionAsync(null);
        }
        
        public void GetCityConditionAsync(object userState) {
            if ((this.onBeginGetCityConditionDelegate == null)) {
                this.onBeginGetCityConditionDelegate = new BeginOperationDelegate(this.OnBeginGetCityCondition);
            }
            if ((this.onEndGetCityConditionDelegate == null)) {
                this.onEndGetCityConditionDelegate = new EndOperationDelegate(this.OnEndGetCityCondition);
            }
            if ((this.onGetCityConditionCompletedDelegate == null)) {
                this.onGetCityConditionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCityConditionCompleted);
            }
            base.InvokeAsync(this.onBeginGetCityConditionDelegate, null, this.onEndGetCityConditionDelegate, this.onGetCityConditionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoodWeather.WeatherService.IWeatherService.BeginSelectCityCondition(string cityName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSelectCityCondition(cityName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<MoodWeather.WeatherService.WeatherCondition> MoodWeather.WeatherService.IWeatherService.EndSelectCityCondition(System.IAsyncResult result) {
            return base.Channel.EndSelectCityCondition(result);
        }
        
        private System.IAsyncResult OnBeginSelectCityCondition(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string cityName = ((string)(inValues[0]));
            return ((MoodWeather.WeatherService.IWeatherService)(this)).BeginSelectCityCondition(cityName, callback, asyncState);
        }
        
        private object[] OnEndSelectCityCondition(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<MoodWeather.WeatherService.WeatherCondition> retVal = ((MoodWeather.WeatherService.IWeatherService)(this)).EndSelectCityCondition(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSelectCityConditionCompleted(object state) {
            if ((this.SelectCityConditionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SelectCityConditionCompleted(this, new SelectCityConditionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SelectCityConditionAsync(string cityName) {
            this.SelectCityConditionAsync(cityName, null);
        }
        
        public void SelectCityConditionAsync(string cityName, object userState) {
            if ((this.onBeginSelectCityConditionDelegate == null)) {
                this.onBeginSelectCityConditionDelegate = new BeginOperationDelegate(this.OnBeginSelectCityCondition);
            }
            if ((this.onEndSelectCityConditionDelegate == null)) {
                this.onEndSelectCityConditionDelegate = new EndOperationDelegate(this.OnEndSelectCityCondition);
            }
            if ((this.onSelectCityConditionCompletedDelegate == null)) {
                this.onSelectCityConditionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSelectCityConditionCompleted);
            }
            base.InvokeAsync(this.onBeginSelectCityConditionDelegate, new object[] {
                        cityName}, this.onEndSelectCityConditionDelegate, this.onSelectCityConditionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoodWeather.WeatherService.IWeatherService.BeginStartDataCollect(string command, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStartDataCollect(command, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoodWeather.WeatherService.IWeatherService.EndStartDataCollect(System.IAsyncResult result) {
            base.Channel.EndStartDataCollect(result);
        }
        
        private System.IAsyncResult OnBeginStartDataCollect(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string command = ((string)(inValues[0]));
            return ((MoodWeather.WeatherService.IWeatherService)(this)).BeginStartDataCollect(command, callback, asyncState);
        }
        
        private object[] OnEndStartDataCollect(System.IAsyncResult result) {
            ((MoodWeather.WeatherService.IWeatherService)(this)).EndStartDataCollect(result);
            return null;
        }
        
        private void OnStartDataCollectCompleted(object state) {
            if ((this.StartDataCollectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StartDataCollectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StartDataCollectAsync(string command) {
            this.StartDataCollectAsync(command, null);
        }
        
        public void StartDataCollectAsync(string command, object userState) {
            if ((this.onBeginStartDataCollectDelegate == null)) {
                this.onBeginStartDataCollectDelegate = new BeginOperationDelegate(this.OnBeginStartDataCollect);
            }
            if ((this.onEndStartDataCollectDelegate == null)) {
                this.onEndStartDataCollectDelegate = new EndOperationDelegate(this.OnEndStartDataCollect);
            }
            if ((this.onStartDataCollectCompletedDelegate == null)) {
                this.onStartDataCollectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStartDataCollectCompleted);
            }
            base.InvokeAsync(this.onBeginStartDataCollectDelegate, new object[] {
                        command}, this.onEndStartDataCollectDelegate, this.onStartDataCollectCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoodWeather.WeatherService.IWeatherService.BeginDeleteDatabase(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteDatabase(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoodWeather.WeatherService.IWeatherService.EndDeleteDatabase(System.IAsyncResult result) {
            base.Channel.EndDeleteDatabase(result);
        }
        
        private System.IAsyncResult OnBeginDeleteDatabase(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((MoodWeather.WeatherService.IWeatherService)(this)).BeginDeleteDatabase(callback, asyncState);
        }
        
        private object[] OnEndDeleteDatabase(System.IAsyncResult result) {
            ((MoodWeather.WeatherService.IWeatherService)(this)).EndDeleteDatabase(result);
            return null;
        }
        
        private void OnDeleteDatabaseCompleted(object state) {
            if ((this.DeleteDatabaseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteDatabaseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteDatabaseAsync() {
            this.DeleteDatabaseAsync(null);
        }
        
        public void DeleteDatabaseAsync(object userState) {
            if ((this.onBeginDeleteDatabaseDelegate == null)) {
                this.onBeginDeleteDatabaseDelegate = new BeginOperationDelegate(this.OnBeginDeleteDatabase);
            }
            if ((this.onEndDeleteDatabaseDelegate == null)) {
                this.onEndDeleteDatabaseDelegate = new EndOperationDelegate(this.OnEndDeleteDatabase);
            }
            if ((this.onDeleteDatabaseCompletedDelegate == null)) {
                this.onDeleteDatabaseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteDatabaseCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteDatabaseDelegate, null, this.onEndDeleteDatabaseDelegate, this.onDeleteDatabaseCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoodWeather.WeatherService.IWeatherService.BeginWriteToLog(string msg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginWriteToLog(msg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoodWeather.WeatherService.IWeatherService.EndWriteToLog(System.IAsyncResult result) {
            base.Channel.EndWriteToLog(result);
        }
        
        private System.IAsyncResult OnBeginWriteToLog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string msg = ((string)(inValues[0]));
            return ((MoodWeather.WeatherService.IWeatherService)(this)).BeginWriteToLog(msg, callback, asyncState);
        }
        
        private object[] OnEndWriteToLog(System.IAsyncResult result) {
            ((MoodWeather.WeatherService.IWeatherService)(this)).EndWriteToLog(result);
            return null;
        }
        
        private void OnWriteToLogCompleted(object state) {
            if ((this.WriteToLogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.WriteToLogCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void WriteToLogAsync(string msg) {
            this.WriteToLogAsync(msg, null);
        }
        
        public void WriteToLogAsync(string msg, object userState) {
            if ((this.onBeginWriteToLogDelegate == null)) {
                this.onBeginWriteToLogDelegate = new BeginOperationDelegate(this.OnBeginWriteToLog);
            }
            if ((this.onEndWriteToLogDelegate == null)) {
                this.onEndWriteToLogDelegate = new EndOperationDelegate(this.OnEndWriteToLog);
            }
            if ((this.onWriteToLogCompletedDelegate == null)) {
                this.onWriteToLogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnWriteToLogCompleted);
            }
            base.InvokeAsync(this.onBeginWriteToLogDelegate, new object[] {
                        msg}, this.onEndWriteToLogDelegate, this.onWriteToLogCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoodWeather.WeatherService.IWeatherService.BeginSaveXmlFile(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveXmlFile(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoodWeather.WeatherService.IWeatherService.EndSaveXmlFile(System.IAsyncResult result) {
            base.Channel.EndSaveXmlFile(result);
        }
        
        private System.IAsyncResult OnBeginSaveXmlFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((MoodWeather.WeatherService.IWeatherService)(this)).BeginSaveXmlFile(callback, asyncState);
        }
        
        private object[] OnEndSaveXmlFile(System.IAsyncResult result) {
            ((MoodWeather.WeatherService.IWeatherService)(this)).EndSaveXmlFile(result);
            return null;
        }
        
        private void OnSaveXmlFileCompleted(object state) {
            if ((this.SaveXmlFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveXmlFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveXmlFileAsync() {
            this.SaveXmlFileAsync(null);
        }
        
        public void SaveXmlFileAsync(object userState) {
            if ((this.onBeginSaveXmlFileDelegate == null)) {
                this.onBeginSaveXmlFileDelegate = new BeginOperationDelegate(this.OnBeginSaveXmlFile);
            }
            if ((this.onEndSaveXmlFileDelegate == null)) {
                this.onEndSaveXmlFileDelegate = new EndOperationDelegate(this.OnEndSaveXmlFile);
            }
            if ((this.onSaveXmlFileCompletedDelegate == null)) {
                this.onSaveXmlFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveXmlFileCompleted);
            }
            base.InvokeAsync(this.onBeginSaveXmlFileDelegate, null, this.onEndSaveXmlFileDelegate, this.onSaveXmlFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoodWeather.WeatherService.IWeatherService.BeginUploadFileFtpAutomate(string fileStream, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadFileFtpAutomate(fileStream, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string MoodWeather.WeatherService.IWeatherService.EndUploadFileFtpAutomate(System.IAsyncResult result) {
            return base.Channel.EndUploadFileFtpAutomate(result);
        }
        
        private System.IAsyncResult OnBeginUploadFileFtpAutomate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fileStream = ((string)(inValues[0]));
            return ((MoodWeather.WeatherService.IWeatherService)(this)).BeginUploadFileFtpAutomate(fileStream, callback, asyncState);
        }
        
        private object[] OnEndUploadFileFtpAutomate(System.IAsyncResult result) {
            string retVal = ((MoodWeather.WeatherService.IWeatherService)(this)).EndUploadFileFtpAutomate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUploadFileFtpAutomateCompleted(object state) {
            if ((this.UploadFileFtpAutomateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadFileFtpAutomateCompleted(this, new UploadFileFtpAutomateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadFileFtpAutomateAsync(string fileStream) {
            this.UploadFileFtpAutomateAsync(fileStream, null);
        }
        
        public void UploadFileFtpAutomateAsync(string fileStream, object userState) {
            if ((this.onBeginUploadFileFtpAutomateDelegate == null)) {
                this.onBeginUploadFileFtpAutomateDelegate = new BeginOperationDelegate(this.OnBeginUploadFileFtpAutomate);
            }
            if ((this.onEndUploadFileFtpAutomateDelegate == null)) {
                this.onEndUploadFileFtpAutomateDelegate = new EndOperationDelegate(this.OnEndUploadFileFtpAutomate);
            }
            if ((this.onUploadFileFtpAutomateCompletedDelegate == null)) {
                this.onUploadFileFtpAutomateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadFileFtpAutomateCompleted);
            }
            base.InvokeAsync(this.onBeginUploadFileFtpAutomateDelegate, new object[] {
                        fileStream}, this.onEndUploadFileFtpAutomateDelegate, this.onUploadFileFtpAutomateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MoodWeather.WeatherService.IWeatherService.BeginCreateXmlBackup(string fileName, string content, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateXmlBackup(fileName, content, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MoodWeather.WeatherService.IWeatherService.EndCreateXmlBackup(System.IAsyncResult result) {
            base.Channel.EndCreateXmlBackup(result);
        }
        
        private System.IAsyncResult OnBeginCreateXmlBackup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fileName = ((string)(inValues[0]));
            string content = ((string)(inValues[1]));
            return ((MoodWeather.WeatherService.IWeatherService)(this)).BeginCreateXmlBackup(fileName, content, callback, asyncState);
        }
        
        private object[] OnEndCreateXmlBackup(System.IAsyncResult result) {
            ((MoodWeather.WeatherService.IWeatherService)(this)).EndCreateXmlBackup(result);
            return null;
        }
        
        private void OnCreateXmlBackupCompleted(object state) {
            if ((this.CreateXmlBackupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateXmlBackupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateXmlBackupAsync(string fileName, string content) {
            this.CreateXmlBackupAsync(fileName, content, null);
        }
        
        public void CreateXmlBackupAsync(string fileName, string content, object userState) {
            if ((this.onBeginCreateXmlBackupDelegate == null)) {
                this.onBeginCreateXmlBackupDelegate = new BeginOperationDelegate(this.OnBeginCreateXmlBackup);
            }
            if ((this.onEndCreateXmlBackupDelegate == null)) {
                this.onEndCreateXmlBackupDelegate = new EndOperationDelegate(this.OnEndCreateXmlBackup);
            }
            if ((this.onCreateXmlBackupCompletedDelegate == null)) {
                this.onCreateXmlBackupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateXmlBackupCompleted);
            }
            base.InvokeAsync(this.onBeginCreateXmlBackupDelegate, new object[] {
                        fileName,
                        content}, this.onEndCreateXmlBackupDelegate, this.onCreateXmlBackupCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override MoodWeather.WeatherService.IWeatherService CreateChannel() {
            return new WeatherServiceClientChannel(this);
        }
        
        private class WeatherServiceClientChannel : ChannelBase<MoodWeather.WeatherService.IWeatherService>, MoodWeather.WeatherService.IWeatherService {
            
            public WeatherServiceClientChannel(System.ServiceModel.ClientBase<MoodWeather.WeatherService.IWeatherService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCheckCity(string cityName, string countryCode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = cityName;
                _args[1] = countryCode;
                System.IAsyncResult _result = base.BeginInvoke("CheckCity", _args, callback, asyncState);
                return _result;
            }
            
            public string EndCheckCity(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("CheckCity", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSelectCity(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("SelectCity", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<MoodWeather.WeatherService.CityList> EndSelectCity(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<MoodWeather.WeatherService.CityList> _result = ((System.Collections.ObjectModel.ObservableCollection<MoodWeather.WeatherService.CityList>)(base.EndInvoke("SelectCity", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCityLists(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetCityLists", _args, callback, asyncState);
                return _result;
            }
            
            public void EndGetCityLists(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("GetCityLists", _args, result);
            }
            
            public System.IAsyncResult BeginGetWeatherForecast(string countryCode, string countryCodeTeamco, string city, string cityalternative, string commandType, string cityId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = countryCode;
                _args[1] = countryCodeTeamco;
                _args[2] = city;
                _args[3] = cityalternative;
                _args[4] = commandType;
                _args[5] = cityId;
                System.IAsyncResult _result = base.BeginInvoke("GetWeatherForecast", _args, callback, asyncState);
                return _result;
            }
            
            public void EndGetWeatherForecast(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("GetWeatherForecast", _args, result);
            }
            
            public System.IAsyncResult BeginInsertData(string cityName, string cityId, string countryCode, string condition, string sunrise, string sunset, string tempLow, string tempHigh, string icon, string skyIcon, System.DateTime date, string weekDay, string updateBy, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[13];
                _args[0] = cityName;
                _args[1] = cityId;
                _args[2] = countryCode;
                _args[3] = condition;
                _args[4] = sunrise;
                _args[5] = sunset;
                _args[6] = tempLow;
                _args[7] = tempHigh;
                _args[8] = icon;
                _args[9] = skyIcon;
                _args[10] = date;
                _args[11] = weekDay;
                _args[12] = updateBy;
                System.IAsyncResult _result = base.BeginInvoke("InsertData", _args, callback, asyncState);
                return _result;
            }
            
            public void EndInsertData(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("InsertData", _args, result);
            }
            
            public System.IAsyncResult BeginGetCityCondition(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetCityCondition", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<MoodWeather.WeatherService.WeatherCondition> EndGetCityCondition(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<MoodWeather.WeatherService.WeatherCondition> _result = ((System.Collections.ObjectModel.ObservableCollection<MoodWeather.WeatherService.WeatherCondition>)(base.EndInvoke("GetCityCondition", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSelectCityCondition(string cityName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cityName;
                System.IAsyncResult _result = base.BeginInvoke("SelectCityCondition", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<MoodWeather.WeatherService.WeatherCondition> EndSelectCityCondition(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<MoodWeather.WeatherService.WeatherCondition> _result = ((System.Collections.ObjectModel.ObservableCollection<MoodWeather.WeatherService.WeatherCondition>)(base.EndInvoke("SelectCityCondition", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginStartDataCollect(string command, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = command;
                System.IAsyncResult _result = base.BeginInvoke("StartDataCollect", _args, callback, asyncState);
                return _result;
            }
            
            public void EndStartDataCollect(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("StartDataCollect", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteDatabase(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DeleteDatabase", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteDatabase(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteDatabase", _args, result);
            }
            
            public System.IAsyncResult BeginWriteToLog(string msg, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = msg;
                System.IAsyncResult _result = base.BeginInvoke("WriteToLog", _args, callback, asyncState);
                return _result;
            }
            
            public void EndWriteToLog(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("WriteToLog", _args, result);
            }
            
            public System.IAsyncResult BeginSaveXmlFile(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("SaveXmlFile", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSaveXmlFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SaveXmlFile", _args, result);
            }
            
            public System.IAsyncResult BeginUploadFileFtpAutomate(string fileStream, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = fileStream;
                System.IAsyncResult _result = base.BeginInvoke("UploadFileFtpAutomate", _args, callback, asyncState);
                return _result;
            }
            
            public string EndUploadFileFtpAutomate(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("UploadFileFtpAutomate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateXmlBackup(string fileName, string content, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = fileName;
                _args[1] = content;
                System.IAsyncResult _result = base.BeginInvoke("CreateXmlBackup", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCreateXmlBackup(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CreateXmlBackup", _args, result);
            }
        }
    }
}
